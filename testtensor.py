import pennylane as qml
from pennylane_qiskit import AerDevice

import numpy as np

dev = AerDevice(4, shots=8192, backend="qasm_simulator")
# dev = AerDevice(4, shots=0, backend="statevector_simulator")

state = np.array(
[-0.261731+0.168737*1j,-0.29686+0.271412*1j,-0.0784235+0.207215*1j,-0.261282+0.0494769*1j,-0.249531+0.171743*1j,0.161506 -0.00764956*1j,0.124922 -0.0647113*1j,0.0143323 +0.134286*1j,-0.167435-0.0221146*1j,0.225272 -0.0757478*1j,-0.260864+0.123485*1j,-0.22129-0.216037*1j,0.114676 -0.153486*1j,0.166597 +0.286896*1j,0.0712775 -0.00290848*1j,0.0219457 -0.221818*1j]
)

state /= np.linalg.norm(state)

A = np.array(
[[1.73634 + 0.*1j, -0.114153 + 1.08466*1j, 0.639307 + 0.198347*1j, -0.303698 - 0.799565*1j, 0.299511 + 0.952531*1j, 0.281063 - 1.19283*1j, 0.313087 + 1.04956*1j, -0.341259 + 0.320722*1j], [-0.114153 - 1.08466*1j, -0.632264 + 0.*1j, 0.272394 - 0.42795*1j, -0.686655 + 0.784004*1j, 0.913879 + 0.280908*1j, -0.0928758 + 1.21516*1j, -0.0136158 + 0.397565*1j, 0.139394 - 0.72783*1j], [0.639307 - 0.198347*1j,  0.272394 + 0.42795*1j, -1.81159 + 0.*1j, -0.701714 - 1.8081*1j, -0.399449 - 0.608442*1j, 0.89882 + 0.2773*1j,  1.40834 - 1.23793*1j, -0.36545 + 0.468885*1j], [-0.303698 + 0.799565*1j, -0.686655 - 0.784004*1j, -0.701714 + 1.8081*1j,   0.362418 + 0.*1j, 1.07288 + 0.837459*1j, 0.827619 + 1.41455*1j, -0.719637 - 0.446445*1j, -1.06195 + 0.396631*1j], [0.299511 - 0.952531*1j, 0.913879 - 0.280908*1j, -0.399449 + 0.608442*1j, 1.07288 - 0.837459*1j, -0.588682 + 0.*1j, -0.587375 -  1.13038*1j, -0.142222 + 0.345229*1j, 0.69072 + 0.222851*1j], [0.281063 + 1.19283*1j, -0.0928758 -  1.21516*1j, 0.89882 - 0.2773*1j, 0.827619 - 1.41455*1j, -0.587375 + 1.13038*1j, 0.2556 + 0.*1j, -0.802395 + 0.34206*1j, -1.13756 +  0.623953*1j], [0.313087 - 1.04956*1j, -0.0136158 - 0.397565*1j, 1.40834 + 1.23793*1j, -0.719637 + 0.446445*1j, -0.142222 -  0.345229*1j, -0.802395 - 0.34206*1j, -0.907646 + 0.*1j, -0.0619649 -  0.0836803*1j], [-0.341259 - 0.320722*1j, 0.139394 + 0.72783*1j, -0.36545 - 0.468885*1j, -1.06195 - 0.396631*1j, 0.69072 - 0.222851*1j, -1.13756 - 0.623953*1j, -0.0619649 +  0.0836803*1j, -1.34634 + 0.*1j]]
)


@qml.qnode(dev)
def circuit():
    # qml.QubitStateVector(state, wires=[0, 1, 2, 3])
    # H = qml.PauliY(0) @ qml.Hermitian(A, wires=[1, 2, 3])
    # return qml.var(H)
    return qml.expval(qml.PauliY(0)), qml.var(qml.Hermitian(A, wires=[1,2,3]))

print(circuit())

dev = qml.device("default.qubit", wires=4)

@qml.qnode(dev)
def circuit():
    # qml.QubitStateVector(state, wires=[0, 1, 2, 3])
    # H = qml.PauliY(0) @ qml.Hermitian(A, wires=[1, 2, 3])
    # return qml.var(H)
    return qml.expval(qml.PauliY(0)), qml.var(qml.Hermitian(A, wires=[1,2,3]))

print(circuit())
